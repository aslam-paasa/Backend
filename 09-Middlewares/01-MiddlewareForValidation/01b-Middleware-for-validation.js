/**
 * Introducting and writing simple middlewares:
 * => When a request comes from client to server, first HTTP is parsed
 *    i.e. '/cars' request.
 * => Then it goes to the router. If we see the code below, there are
 *    two parts of the code:
 *    
 *    app.get('/', (req, res) => {
 *       res.send('Hello express');
 *    })
 * 
 *    (a) http.get()
 *    (b) '/' => route
 *    (c) callback
 * 
 * => Generally, if it goes to router, it says we know what './cars' is,
 *    let me give it to the "callback" i.e. route handler.
 * 
 * Middleware:
 * Instead of giving it directly to route handler, there is someone
 * in between which wants to process the routes before it goes to the
 * route handler i.e. middleware. And then it do some process, pass it
 * to the route handler and then route handler send back the response.
 * 
 * => Example of middleware: json.parser() : Anything which is going
 *    should go to JSON.parser() and it parse JSON from the body and
 *    put it in req.body. 
 * 
 * Note: To send the request to next middleware or route handler, we 
 *       have to use a function called "next()". 
*/ 

/** 
 * Q. Creating a Middleware: 
 * => Middlware functions are functions that have access to the request
 *    (req), response(res), and next middleware function in the 
 *    applications' request-response cycle.
 * => Let's create a middleware function that logs a message to the
 *    console for each incoming request.
 * */


/**
 * Explanation:
 * 1. The client(browser) sends an HTTP request to the server.
 * 2. The request first hits the Express app(the 'app' object created
 *    using express()) in this file. This is the main entry point for
 *    handling all requests to your server.
 * 3. Express processes the request though 'middleware' before reaching
 *    the route handler.
 *    - Middleware is a function that can process the request and even
 *      modify it before passing it to the next step.
 *    - In our case, 'loggerMiddleware' is applied globally to all routes
 *      using app.use(loggerMiddleware).
 *    - This middleware logs the incoming request time to the console.
 *      For example, Incoming request at: 2024-11-09T15:30:00.000Z
 * 4. After request passes through the loggerMiddleware, it is handled
 *    off the route-specific middleware or the route handler itself.
 *    - For requests to '/cars', the middleware 'app.use('/cars', carsRouter)
 *      directs the request to the carsRouter(defined in File-2).
 *    - The carsRouter contains a route handler for 'GET/', which is defined
 *      in File-2 as carsRouter.get('/', ...)
 * 5. After carsRouter is responsible for handling the '/cars' route. When
 *    the client makes a 'GET/cars' request, the handler returns a response.
 *    - In this case, the carsRouter.get('/', (req, res) => {...}) responds
 *      with the cars data from '03c-data.js' (File-3).
 *    - The server sends the list of cars back as a JSON response:
 *      [{ id: 1, make: 'Toyota', model: 'Camry', year: 2022 }, ...]
 * 6. After the response is generated by the route handler, it is sent
 *    back to the client.
 *    - The client receives the response and can display the data in the
 *      browser.
 *    - If the client requested the '/cars' route, the browser would
 *      render the JSON response, typically showing the list of cars.
 * 7. Once the response is sent back to the client, the cycle is complete.
 * 8. If there are any errors during the process, Express will send an
 *    appropriate error response.
*/

const express = require('express');
const app = express();

/**
 * Step-1: Middleware function to log incoming requests
 */
const loggerMiddleware = (req, res, next) => {
    console.log('Incoming request at:', new Date().toISOString());
    next(); // Call next() to move to the next middleware or route handler
};


/**
 * Step-2: Application Level Middleware to all routes:
 * => By using app.use() with loggerMiddleware, the middleware is applied
 *    to all routes in the application.
 */
app.use(loggerMiddleware); // This can now safely use loggerMiddleware since it's defined


/**
 * Step-3: Router Level Middleware
*/
const carsRouter = require('./01a-cars-router');
app.use('/cars', carsRouter); // Uses the carsRouter for '/cars' routes


app.get('/', (req, res) => {
    res.send('Hello, Express!');
});


const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});


/**
 * Client Request & Server Response:
 * 1. Client Request:
 * => GET http://localhost:3000/cars
 * 
 * 2. Server Logs:
 * => Incoming request at: 2024-11-09T15:30:00.000Z
 * 
 * 3. Server Response (in JSON format):
 * [
 *     { "id": 1, "make": "Toyota", "model": "Camry", "year": 2022 },
 *     { "id": 2, "make": "Honda", "model": "Civic", "year": 2021 },
 *     { "id": 3, "make": "Ford", "model": "Mustang", "year": 2022 },
 *     { "id": 4, "make": "Chevrolet", "model": "Corvette", "year": 2023 },
 *     { "id": 5, "make": "Tesla", "model": "Model 3", "year": 2021 },
 *     { "id": 6, "make": "Nissan", "model": "Altima", "year": 2022 },
 *     { "id": 7, "make": "BMW", "model": "X5", "year": 2023 },
 *     { "id": 8, "make": "Mercedes-Benz", "model": "C-Class", "year": 2021 },
 *     { "id": 9, "make": "Audi", "model": "A4", "year": 2022 },
 *     { "id": 10, "make": "Lexus", "model": "RX", "year": 2023 },
 *     { "id": 11, "make": "Hyundai", "model": "Tucson", "year": 2021 },
 *     { "id": 12, "make": "Kia", "model": "Seltos", "year": 2022 },
 *     { "id": 13, "make": "Mazda", "model": "CX-5", "year": 2023 },
 *     { "id": 14, "make": "Subaru", "model": "Outback", "year": 2021 },
 *     { "id": 15, "make": "Volkswagen", "model": "Golf", "year": 2022 }
 * ]
*/